# 工作流名称，显示在GitHub Actions的界面中
name: 手动指定TAG编译

# 触发条件：手动触发并支持指定TAG
on:
  workflow_dispatch:  # 手动触发选项
    inputs:  # 定义手动触发时的输入参数
      tag:
        description: '构建的版本TAG(如: v4.3.0)'
        required: true  # 必填项
        default: 'v4.3.0'

jobs:
  build:
    # 指定运行环境为Ubuntu 22.04
    runs-on: ubuntu-22.04
    steps:
      # 第一步：检出指定TAG的代码
      - name: Checkout specific tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag }}
          repository: ai773203918/kkFileView

      # 第二步：设置JDK环境
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
          cache: 'maven'

      # 第三步：提取版本号（去掉v前缀）
      - name: Extract version number
        run: |
          VERSION=${TAG#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
        env:
          TAG: ${{ github.event.inputs.tag }}

      # 第四步：执行Maven构建
      - name: Build with Maven
        run: mvn -B package -Dmaven.test.skip=true --file pom.xml

      # 设置QEMU，用于构建多平台镜像
      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      # 设置Docker Buildx
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 登录到Docker Hub
      - name: 登录 DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 准备镜像标签
      - name: 设置 Image Tags
        run: |
          echo "TAG=918178/kkfileview:${{ env.VERSION }}" >> $GITHUB_ENV
          echo "TAG_LATEST=918178/kkfileview:latest" >> $GITHUB_ENV

      # 创建动态 Dockerfile
      - name: 创建动态 Dockerfile
        run: |
          cat > ./Dockerfile_custom << 'EOF'
          # 使用所需的基础镜像
          FROM keking/kkfileview-jdk
          # 添加构建好的压缩包到镜像中
          ADD server/target/kkFileView-*.tar.gz /opt/
          # 设置环境变量
          ENV KKFILEVIEW_BIN_FOLDER=/opt/kkFileView-${{ env.VERSION }}/bin
          # 设置入口点
          ENTRYPOINT ["java","-Dfile.encoding=UTF-8","-Dspring.config.location=/opt/kkFileView-${{ env.VERSION }}/config/application.properties","-jar","/opt/kkFileView-${{ env.VERSION }}/bin/kkFileView-${{ env.VERSION }}.jar"]
          EOF
          # 打印Dockerfile内容以便调试
          cat ./Dockerfile_custom

      # 构建并推送镜像
      - name: 编译并推送 kkfileview 镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile_custom
          platforms: linux/amd64
          push: true
          build-args: |
            VERSION=${{ env.VERSION }}
          tags: |
            ${{ env.TAG }}
            ${{ env.TAG_LATEST }}

      # 上传构建产物
      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kkFileView-${{ env.VERSION }}-zip
          path: server/target/kkFileView-*.zip

      - name: Upload TAR.GZ Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kkFileView-${{ env.VERSION }}-tar-gz
          path: server/target/kkFileView*.tar.gz

      # 输出构建信息
      - name: Display build info
        run: |
          echo "构建完成!"
          echo "版本: ${{ env.TAG }}"
          echo "Docker镜像: ${{ env.TAG }} 和 ${{ env.TAG_LATEST }}"
